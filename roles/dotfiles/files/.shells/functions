## Functions

# bump version in npm modules with standard commit message
bumpv()
{
  if [ -z "$1" ]; then
    echo "You have to specify which part of the version to bump"
  fi
  npm version $1 -m "Bump version to %s for publishing"
}

# grep for "TODO" string
todo()
{
  if [ $# -lt 1 ]; then
    grep -R -n "TODO: " . | grep -v ".svn"
  else
    # loop through the args
    while [ -n "$1" ]
    do
      grep -R -n "TODO: " "$1" | grep -v ".svn"
      shift
    done
  fi
}

# grep for "BUG" string
bugs()
{
  if [ $# -lt 1 ]; then
    grep -R -n "BUG: " . | grep -v ".svn"
  else
  # loop through the args
    while [ -n "$1" ]
    do
      grep -R -n "BUG: " "$1" | grep -v ".svn"
      shift
    done
  fi
}

# check current directory for files with CR line endings
# requires Bash 3.0 (regular expressions)
check_cr()
{
  # execute in subshell (temporarily overriding IFS)
  (IFS="
"
   for FILE in $(find . -type f)
   do
     TYPE=$(file -b "$FILE")
     if [[ "$TYPE" =~ 'text' ]]; then
       if ! perl -ne "exit 1 if m/\r/;" "$FILE"; then
         echo "CR detected in : $FILE"
       else
         echo "ok : $FILE"
       fi
     else
       echo "not a text file: $FILE"
     fi
   done)
}

# count number of lines of source code in a directory
countsource()
{
  # if no argument supplied, count current directory
  if [ ! -n "$1" ]; then
      find . -name "*.js" -print0 | xargs -0 wc -l
  else
    # loop through args: note they have to be directories or it won't work
    while [ -n "$1" ]
    do
      echo "Counting lines of source code in: $1"
      find "$1" -name "*.js" -print0 | xargs -0 wc -l
      shift
    done
  fi
}

# get pid of named command(s)
pid()
{
  while [ -n "$1" ]
  do
    ps axww -o pid,command | grep -i "$1" | grep -v grep | awk '{print $1}'
    shift
  done
}

# regmv = regex + mv (mv with regex parameter specification)
# example: regmv '/\.tif$/.tiff/' *
# replaces .tif with .tiff for all files in current dir
# must quote the regex otherwise "\." becomes "."
# limitations: ? doesn't seem to work in the regex, nor *
regmv()
{
  if [ $# -lt 2 ]; then
    echo " Usage: regmv 'regex' file(s)"
    echo " Where: 'regex' should be of the format '/find/replace/'"
    echo "Example: regmv '/\.tif\$/.tiff/' *"
    echo " Note: Must quote/escape the regex otherwise \"\.\" becomes \".\""
    return 1
  fi
    regex="$1"
    shift
  while [ -n "$1" ]
  do
    newname=`echo "$1" | sed "s${regex}g"`
    if [ "${newname}" != "$1" ]; then
      mv -i -v "$1" "$newname"
    fi
    shift
  done
}

# Tests whether a given executable exists
command_exists () {
  type "$1" 2> /dev/null ;
}
